{"version":3,"sources":["../src/mem0.ts","../src/telemetry.browser.ts","../src/index.ts"],"sourcesContent":["import axios from 'axios';\nimport { AllUsers, ProjectOptions, Memory, MemoryHistory, MemoryOptions, MemoryUpdateBody, ProjectResponse, PromptUpdatePayload, SearchOptions, Webhook, WebhookPayload } from './mem0.types';\nimport { captureClientEvent, generateHash } from './telemetry';\n\nclass APIError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'APIError';\n  }\n}\n\ninterface ClientOptions{\n  apiKey: string;\n  host?: string;\n  organizationName?: string;\n  projectName?: string;\n  organizationId?: string;\n  projectId?: string;\n}\n\nexport default class MemoryClient {\n  apiKey: string;\n  host: string;\n  organizationName: string | null;\n  projectName: string | null;\n  organizationId: string | number | null;\n  projectId: string | number | null;\n  headers: Record<string, string>;\n  client: any;\n  telemetryId: string;\n\n  _validateApiKey(): any {\n    if (!this.apiKey) {\n      throw new Error('Mem0 API key is required');\n    }\n    if (typeof this.apiKey !== 'string') {\n      throw new Error('Mem0 API key must be a string');\n    }\n    if (this.apiKey.trim() === '') {\n      throw new Error('Mem0 API key cannot be empty');\n    }\n  }\n\n  _validateOrgProject(): void {\n    // Check for organizationName/projectName pair\n    if ((this.organizationName === null && this.projectName !== null) || \n        (this.organizationName !== null && this.projectName === null)) {\n      console.warn('Warning: Both organizationName and projectName must be provided together when using either. This will be removedfrom the version 1.0.40. Note that organizationName/projectName are being deprecated in favor of organizationId/projectId.');\n    }\n\n    // Check for organizationId/projectId pair\n    if ((this.organizationId === null && this.projectId !== null) || \n        (this.organizationId !== null && this.projectId === null)) {\n      console.warn('Warning: Both organizationId and projectId must be provided together when using either. This will be removedfrom the version 1.0.40.');\n    }\n  }\n\n  constructor(options: ClientOptions) {\n    this.apiKey = options.apiKey;\n    this.host = options.host || \"https://api.mem0.ai\";\n    this.organizationName = options.organizationName || null;\n    this.projectName = options.projectName || null;\n    this.organizationId = options.organizationId || null;\n    this.projectId = options.projectId || null;\n\n    this.headers = {\n        'Authorization': `Token ${this.apiKey}`,\n        'Content-Type': 'application/json'\n    };\n\n    this.client = axios.create({\n        baseURL: this.host,\n        headers: { Authorization: `Token ${this.apiKey}` },\n        timeout: 60000,\n    });\n\n    this._validateApiKey();\n    this._validateOrgProject();\n\n    // Initialize with a temporary ID that will be updated\n    this.telemetryId = '';\n    \n    // Initialize the client\n    this._initializeClient();\n  }\n\n  private async _initializeClient() {\n    try {\n      this.telemetryId = await generateHash(this.apiKey);\n      await captureClientEvent('init', this);\n\n      // Wrap methods after initialization\n      this.add = this.wrapMethod('add', this.add);\n      this.get = this.wrapMethod('get', this.get);\n      this.getAll = this.wrapMethod('get_all', this.getAll);\n      this.search = this.wrapMethod('search', this.search);\n      this.delete = this.wrapMethod('delete', this.delete);\n      this.deleteAll = this.wrapMethod('delete_all', this.deleteAll);\n      this.history = this.wrapMethod('history', this.history);\n      this.users = this.wrapMethod('users', this.users);\n      this.deleteUser = this.wrapMethod('delete_user', this.deleteUser);\n      this.deleteUsers = this.wrapMethod('delete_users', this.deleteUsers);\n      this.batchUpdate = this.wrapMethod('batch_update', this.batchUpdate);\n      this.batchDelete = this.wrapMethod('batch_delete', this.batchDelete);\n      this.getProject = this.wrapMethod('get_project', this.getProject);\n      this.updateProject = this.wrapMethod('update_project', this.updateProject);\n      this.getWebhooks = this.wrapMethod('get_webhook', this.getWebhooks);\n      this.createWebhook = this.wrapMethod('create_webhook', this.createWebhook);\n      this.updateWebhook = this.wrapMethod('update_webhook', this.updateWebhook);\n      this.deleteWebhook = this.wrapMethod('delete_webhook', this.deleteWebhook);\n    } catch (error) {\n      console.error('Failed to initialize client:', error);\n    }\n  }\n\n  wrapMethod(methodName: any, method: any) {\n    return async function (...args: any) {\n        // @ts-ignore\n        await captureClientEvent(methodName, this);\n        // @ts-ignore\n        return method.apply(this, args);\n    }.bind(this);\n}\n\n  async _fetchWithErrorHandling(url: string, options: any): Promise<any> {\n    const response = await fetch(url, options);\n    if (!response.ok) {\n      const errorData = await response.text();\n      throw new APIError(`API request failed: ${errorData}`);\n    }\n    const jsonResponse = await response.json();\n    return jsonResponse;\n  }\n\n  _preparePayload(messages: string | Array<{ role: string; content: string }>,\n    options: MemoryOptions): object {\n    const payload: any = {};\n    if (typeof messages === 'string') {\n        payload.messages = [{ role: 'user', content: messages }];\n    } else if (Array.isArray(messages)) {\n        payload.messages = messages;\n    }\n    return { ...payload, ...options };\n  }\n\n  _prepareParams(options: MemoryOptions): object {\n    return Object.fromEntries(Object.entries(options).filter(([_, v]) => v != null));\n  }\n\n  async add(messages: string | Array<{ role: string; content: string }>, options:MemoryOptions = {}): Promise<Array<Memory>> {\n    this._validateOrgProject();\n    if(this.organizationName != null && this.projectName != null){\n      options.org_name = this.organizationName;\n      options.project_name = this.projectName;\n    }\n\n    if(this.organizationId != null && this.projectId != null){\n      options.org_id = this.organizationId;\n      options.project_id = this.projectId;\n\n      if (options.org_name) delete options.org_name;\n      if(options.project_name) delete options.project_name;\n    }\n\n    const payload = this._preparePayload(messages, options);\n    const response = await this._fetchWithErrorHandling(`${this.host}/v1/memories/`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(payload)\n    });\n    return response;\n  }\n\n  async update(memoryId: string, message: string): Promise<Array<Memory>> {\n    this._validateOrgProject();\n    const payload = {\n      text: message\n    }\n    const response = await this._fetchWithErrorHandling(`${this.host}/v1/memories/${memoryId}/`, {\n      method: 'PUT',\n      headers: this.headers,\n      body: JSON.stringify(payload)\n    });\n    return response;\n  }\n\n  async get(memoryId: string):Promise<Memory> {\n    return this._fetchWithErrorHandling(`${this.host}/v1/memories/${memoryId}/`, {\n        headers: this.headers\n    });\n  }\n\n  async getAll(options?: SearchOptions): Promise<Array<Memory>> {\n    this._validateOrgProject();\n    const { api_version, page, page_size, ...otherOptions } = options!;\n    if(this.organizationName != null && this.projectName != null){\n      otherOptions.org_name = this.organizationName;\n      otherOptions.project_name = this.projectName;\n    }\n\n    let appendedParams = \"\";\n    let paginated_response = false;\n\n    if(page && page_size){\n      appendedParams += `page=${page}&page_size=${page_size}`\n      paginated_response = true;\n    }\n\n    if(this.organizationId != null && this.projectId != null){\n      otherOptions.org_id = this.organizationId;\n      otherOptions.project_id = this.projectId;\n\n      if (otherOptions.org_name) delete otherOptions.org_name;\n      if(otherOptions.project_name) delete otherOptions.project_name;\n    }\n\n    if (api_version === 'v2') {\n        let url = paginated_response ? `${this.host}/v2/memories/?${appendedParams}` : `${this.host}/v2/memories/`;\n        return this._fetchWithErrorHandling(url, {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify(otherOptions)\n        });\n    } else {\n        // @ts-ignore\n        const params = new URLSearchParams(this._prepareParams(otherOptions));\n        const url = paginated_response ? `${this.host}/v1/memories/?${params}&${appendedParams}` : `${this.host}/v1/memories/?${params}`;\n        return this._fetchWithErrorHandling(url, {\n            headers: this.headers\n        });\n    }\n  }\n\n  async search(query: string, options?: SearchOptions): Promise<Array<Memory>> {\n    this._validateOrgProject();\n    const { api_version, ...otherOptions } = options!;\n    const payload = { query, ...otherOptions };\n    if(this.organizationName != null && this.projectName != null){\n      payload.org_name = this.organizationName;\n      payload.project_name = this.projectName;\n    }\n\n    if(this.organizationId != null && this.projectId != null){\n      payload.org_id = this.organizationId;\n      payload.project_id = this.projectId;\n\n      if (payload.org_name) delete payload.org_name;\n      if(payload.project_name) delete payload.project_name;\n    }\n    const endpoint = api_version === 'v2' ? '/v2/memories/search/' : '/v1/memories/search/';\n    const response = await this._fetchWithErrorHandling(`${this.host}${endpoint}`, {\n        method: 'POST',\n        headers: this.headers,\n        body: JSON.stringify(payload)\n    });\n    return response;\n  }\n\n  async delete(memoryId: string): Promise<{ message: string }> {\n    return this._fetchWithErrorHandling(`${this.host}/v1/memories/${memoryId}/`, {\n        method: 'DELETE',\n        headers: this.headers\n    });\n  }\n\n  async deleteAll(options: MemoryOptions = {}): Promise<{ message: string }> {\n    this._validateOrgProject();\n    if(this.organizationName != null && this.projectName != null){\n      options.org_name = this.organizationName;\n      options.project_name = this.projectName;\n    }\n\n    if(this.organizationId != null && this.projectId != null){\n      options.org_id = this.organizationId;\n      options.project_id = this.projectId;\n\n      if (options.org_name) delete options.org_name;\n      if(options.project_name) delete options.project_name;\n    }\n    // @ts-ignore\n    const params = new URLSearchParams(this._prepareParams(options));\n    const response = await this._fetchWithErrorHandling(`${this.host}/v1/memories/?${params}`, {\n        method: 'DELETE',\n        headers: this.headers\n    });\n    return response;\n  }\n\n  async history(memoryId: string): Promise<Array<MemoryHistory>> {\n    const response = await this._fetchWithErrorHandling(`${this.host}/v1/memories/${memoryId}/history/`, {\n        headers: this.headers\n    });\n    return response;\n  }\n\n  async users(): Promise<AllUsers>{\n    this._validateOrgProject();\n    const options: MemoryOptions = {};\n    if(this.organizationName != null && this.projectName != null){\n      options.org_name = this.organizationName;\n      options.project_name = this.projectName;\n    }\n\n    if(this.organizationId != null && this.projectId != null){\n      options.org_id = this.organizationId;\n      options.project_id = this.projectId;\n\n      if (options.org_name) delete options.org_name;\n      if(options.project_name) delete options.project_name;\n    }\n    // @ts-ignore\n    const params = new URLSearchParams(options);\n    const response = await this._fetchWithErrorHandling(`${this.host}/v1/entities/?${params}`, {\n        headers: this.headers\n    });\n    return response;\n  }\n\n  async deleteUser(entityId: string, entity: { type: string } = { type: 'user' }): Promise<{ message: string }> {\n    const response = await this._fetchWithErrorHandling(`${this.host}/v1/entities/${entity.type}/${entityId}/`, {\n        method: 'DELETE',\n        headers: this.headers\n    });\n    return response;\n  }\n\n  async deleteUsers(): Promise<{ message: string }> {\n    this._validateOrgProject();\n    const entities = await this.users();\n    \n    for (const entity of entities.results) {\n        let options: MemoryOptions = {};\n        if(this.organizationName != null && this.projectName != null){\n          options.org_name = this.organizationName;\n          options.project_name = this.projectName;\n        }\n    \n        if(this.organizationId != null && this.projectId != null){\n          options.org_id = this.organizationId;\n          options.project_id = this.projectId;\n    \n          if (options.org_name) delete options.org_name;\n          if(options.project_name) delete options.project_name;\n        }\n        await this.client.delete(`/v1/entities/${entity.type}/${entity.id}/`, { params: options });\n    }\n    return { message: \"All users, agents, and sessions deleted.\" };\n  }\n\n  async batchUpdate(memories: Array<MemoryUpdateBody>): Promise<string> {\n    const memoriesBody = memories.map(memory => ({\n      memory_id: memory.memoryId,\n      text: memory.text\n    }));\n    const response = await this._fetchWithErrorHandling(`${this.host}/v1/batch/`, {\n        method: 'PUT',\n        headers: this.headers,\n        body: JSON.stringify({memories: memoriesBody})\n    });\n    return response;\n  }\n\n  async batchDelete(memories: Array<string>): Promise<string> {\n    const memoriesBody = memories.map(memory => ({\n      memory_id: memory\n    }));\n    const response = await this._fetchWithErrorHandling(`${this.host}/v1/batch/`, {\n        method: 'DELETE',\n        headers: this.headers,\n        body: JSON.stringify({memories: memoriesBody})\n    });\n    return response;\n  }\n\n  async getProject(options: ProjectOptions): Promise<ProjectResponse> {\n    this._validateOrgProject();\n\n    const { fields } = options;\n    \n    if (!(this.organizationId && this.projectId)) {\n      throw new Error(\"organizationId and projectId must be set to access instructions or categories\");\n    }\n\n    const params = new URLSearchParams();\n    fields?.forEach(field => params.append('fields', field));\n    \n    const response = await this._fetchWithErrorHandling(\n      `${this.host}/api/v1/orgs/organizations/${this.organizationId}/projects/${this.projectId}/?${params.toString()}`,\n      {\n        headers: this.headers\n      }\n    );\n    return response;\n  }\n\n  async updateProject(prompts: PromptUpdatePayload): Promise<Record<string, any>> {\n    this._validateOrgProject();\n    \n    if (!(this.organizationId && this.projectId)) {\n      throw new Error(\"organizationId and projectId must be set to update instructions or categories\");\n    }\n\n    const response = await this._fetchWithErrorHandling(\n      `${this.host}/api/v1/orgs/organizations/${this.organizationId}/projects/${this.projectId}/`,\n      {\n        method: 'PATCH',\n        headers: this.headers,\n        body: JSON.stringify(prompts)\n      }\n    );\n    return response;\n  }\n\n  // WebHooks\n  async getWebhooks(data?: {projectId?: string}): Promise<Array<Webhook>> {\n    const project_id = data?.projectId || this.projectId;\n    const response = await this._fetchWithErrorHandling(`${this.host}/api/v1/webhooks/projects/${project_id}/`, {\n      headers: this.headers\n    });\n    return response;\n  }\n\n  async createWebhook(webhook: WebhookPayload): Promise<Webhook> {\n    const response = await this._fetchWithErrorHandling(`${this.host}/api/v1/webhooks/projects/${this.projectId}/`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(webhook)\n    });\n    return response;\n  }\n\n  async updateWebhook(webhook: WebhookPayload): Promise<{ message: string }> {\n    const project_id = webhook.projectId || this.projectId;\n    const response = await this._fetchWithErrorHandling(`${this.host}/api/v1/webhooks/${webhook.webhookId}/`, {\n      method: 'PUT',\n      headers: this.headers,\n      body: JSON.stringify({\n        ...webhook,\n        projectId: project_id\n      })\n    });\n    return response;\n  }\n\n  async deleteWebhook(data: {webhookId: string}): Promise<{ message: string }> {\n    const webhook_id = data.webhookId || data;\n    const response = await this._fetchWithErrorHandling(`${this.host}/api/v1/webhooks/${webhook_id}/`, {\n      method: 'DELETE', \n      headers: this.headers\n    });\n    return response;\n  }\n}\n\nexport {MemoryClient};","// @ts-nocheck\nimport type { PostHog } from \"posthog-js\";\nimport type { TelemetryClient } from \"./telemetry.types\";\n\nlet version = \"1.0.20\";\n\nconst MEM0_TELEMETRY = process.env.MEM0_TELEMETRY !== \"false\";\nconst POSTHOG_API_KEY = \"phc_hgJkUVJFYtmaJqrvf6CYN67TIQ8yhXAkWzUn9AMU4yX\";\nconst POSTHOG_HOST = \"https://us.i.posthog.com\";\n\n// Browser-specific hash function using Web Crypto API\nasync function generateHash(input: string): Promise<string> {\n  const msgBuffer = new TextEncoder().encode(input);\n  const hashBuffer = await window.crypto.subtle.digest('SHA-256', msgBuffer);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\nclass BrowserTelemetry implements TelemetryClient {\n  client: PostHog | null = null;\n\n  constructor(projectApiKey: string, host: string) {\n    if (MEM0_TELEMETRY) {\n      this.initializeClient(projectApiKey, host);\n    }\n  }\n\n  private async initializeClient(projectApiKey: string, host: string) {\n    try {\n      const posthog = await import('posthog-js').catch(() => null);\n      if (posthog) {\n        posthog.init(projectApiKey, { api_host: host });\n        this.client = posthog;\n      }\n    } catch (error) {\n      // Silently fail if posthog-js is not available\n      this.client = null;\n    }\n  }\n\n  async captureEvent(distinctId: string, eventName: string, properties = {}) {\n    if (!this.client || !MEM0_TELEMETRY) return;\n\n    const eventProperties = {\n      client_source: \"browser\",\n      client_version: getVersion(),\n      browser: window.navigator.userAgent,\n      ...properties,\n    };\n\n    try {\n      this.client.capture(\n        eventName,\n        eventProperties\n      );\n    } catch (error) {\n      // Silently fail if telemetry fails\n    }\n  }\n\n  async shutdown() {\n    // No shutdown needed for browser client\n  }\n}\n\nfunction getVersion() {\n  return version;\n}\n\nconst telemetry = new BrowserTelemetry(\n  POSTHOG_API_KEY,\n  POSTHOG_HOST\n);\n\nasync function captureClientEvent(eventName: string, instance: any, additionalData = {}) {\n  const eventData = {\n    function: `${instance.constructor.name}`,\n    ...additionalData,\n  };\n  await telemetry.captureEvent(\n    instance.telemetryId,\n    `client.${eventName}`,\n    eventData\n  );\n}\n\nexport { telemetry, captureClientEvent, generateHash }; ","import { MemoryClient } from \"./mem0\";\nimport type { TelemetryClient, TelemetryInstance } from './telemetry.types';\nimport { telemetry, captureClientEvent, generateHash } from './telemetry.browser';\nimport type * as MemoryTypes from './mem0.types';\n\n// Re-export all types from mem0.types\nexport type {\n    MemoryOptions,\n    ProjectOptions,\n    Memory,\n    MemoryHistory,\n    MemoryUpdateBody,\n    ProjectResponse,\n    PromptUpdatePayload,\n    SearchOptions,\n    Webhook,\n    WebhookPayload,\n    Messages,\n    Message,\n    AllUsers,\n    User\n} from './mem0.types';\n\n// Export telemetry types\nexport type { TelemetryClient, TelemetryInstance };\n\n// Export telemetry implementation\nexport { telemetry, captureClientEvent, generateHash };\n\n// Export the main client\nexport { MemoryClient };\nexport default MemoryClient;"],"mappings":"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","names":[]}