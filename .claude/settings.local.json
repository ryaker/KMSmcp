{
  "permissions": {
    "allow": [
      "WebFetch(domain:github.com)",
      "Bash(npm install)",
      "Bash(npm run build:*)",
      "Bash(chmod:*)",
      "mcp__filesystem__list_directory",
      "mcp__filesystem__directory_tree",
      "mcp__filesystem__read_file",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:modelcontextprotocol.io)",
      "WebFetch(domain:gofastmcp.com)",
      "Bash(rm:*)",
      "Bash(docker-compose:*)",
      "Bash(docker exec:*)",
      "Bash(npx @modelcontextprotocol/inspector:*)",
      "Bash(ENV_FILE=.env.cloud TRANSPORT_MODE=http HTTP_PORT=3001 node dist/index.js)",
      "Bash(source:*)",
      "Bash(TRANSPORT_MODE=http HTTP_PORT=3001 node dist/index.js)",
      "Bash(npm install:*)",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(lsof:*)",
      "Bash(kill:*)",
      "WebFetch(domain:spec.modelcontextprotocol.io)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "WebFetch(domain:support.anthropic.com)",
      "WebFetch(domain:auth0.com)",
      "Bash(docker compose:*)",
      "Bash(docker logs:*)",
      "WebFetch(domain:stytch.com)",
      "Bash(docker run:*)",
      "Bash(-e MONGODB_URI=$MONGODB_ATLAS_URI )",
      "Bash(-e NEO4J_URI=$NEO4J_AURA_URI )",
      "Bash(-e NEO4J_USERNAME=$NEO4J_AURA_USERNAME )",
      "Bash(-e NEO4J_PASSWORD=$NEO4J_AURA_PASSWORD )",
      "Bash(-e REDIS_URI=$REDIS_CLOUD_URI )",
      "Bash(kmsmcp-unified-kms:latest)",
      "Bash(docker rm:*)",
      "Bash(ls:*)",
      "Bash(node:*)",
      "WebFetch(domain:community.auth0.com)",
      "WebFetch(domain:medium.com)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "mcp__markitdown__convert_to_markdown",
      "WebFetch(domain:forum.cursor.com)",
      "Bash(ngrok:*)",
      "Bash(COMPOSE_FILE=docker-compose.cloud.yml docker-compose up -d unified-kms)",
      "Bash(cp:*)",
      "WebFetch(domain:api.github.com)",
      "Bash(mv:*)",
      "Bash(sed:*)",
      "Bash(npm run dev:cloud:*)",
      "Bash(npm run:*)",
      "mcp__mem0-memory-general__mem0_get_memory_by_id",
      "mcp__mem0-memory-general__mem0_search_memory",
      "mcp__mem0-memory-general__mem0_add_memory",
      "Bash(docker build:*)",
      "Bash(docker stop:*)",
      "WebFetch(domain:docs.mem0.ai)",
      "Bash(git init:*)",
      "Bash(gh auth:*)",
      "Bash(ssh:*)",
      "Bash(git remote add:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git reset:*)",
      "Bash(git rm:*)",
      "Bash(pip3 install:*)",
      "Bash(oci setup:*)",
      "Bash(oci session authenticate:*)",
      "Bash(oci iam region list:*)",
      "Bash(oci iam compartment list:*)",
      "Bash(oci container-instances container-instance list:*)",
      "Bash(oci network vcn list:*)",
      "Bash(oci session validate:*)",
      "Bash(oci iam user list:*)",
      "Bash(oci session terminate:*)",
      "Bash(mkdir:*)",
      "Bash(openssl genrsa:*)",
      "Bash(openssl rsa:*)",
      "Bash(timeout 10 oci iam region list --output table)",
      "Bash(bash:*)",
      "Bash(oci network subnet list:*)",
      "Bash(oci lb backend-set create:*)",
      "Bash(--load-balancer-id ocid1.loadbalancer.oc1.phx.aaaaaaaa3qyzr6nm64y7ibiwqugjnifjf5nw376lvin6edxugb52wnxqszoa )",
      "Bash(--name \"kms-mcp-backend\" )",
      "Bash(--policy \"ROUND_ROBIN\" )",
      "Bash(--health-checker-protocol \"HTTP\" )",
      "Bash(--health-checker-port 3001 )",
      "Bash(--health-checker-url-path \"/\" )",
      "Bash(--health-checker-interval-in-ms 30000 )",
      "Bash(--health-checker-timeout-in-ms 3000 )",
      "Bash(--health-checker-retries 3 )",
      "Bash(--region us-phoenix-1 )",
      "Bash(--wait-for-state SUCCEEDED )",
      "Bash(--wait-interval-seconds 10 )",
      "Bash(--max-wait-seconds 300)",
      "Bash(oci lb listener create:*)",
      "Bash(--load-balancer-id ocid1.loadbalancer.oc1.phx.aaaaaaaa3qyzr6nm64y7ibiwqugjnifjf5nw376lvin6edxugb52wnxqszoa )",
      "Bash(--name \"http-listener\" )",
      "Bash(--default-backend-set-name \"kms-mcp-backend\" )",
      "Bash(--port 80 )",
      "Bash(--protocol \"HTTP\" )",
      "Bash(--region us-phoenix-1 )",
      "Bash(--wait-for-state SUCCEEDED )",
      "Bash(--wait-interval-seconds 10 )",
      "Bash(oci container-instances container-instance delete:*)",
      "Bash(oci container-instances container-instance create:*)",
      "Bash(--from-json file:///tmp/container-config.json )",
      "Bash(--region us-phoenix-1 )",
      "Bash(--wait-for-state SUCCEEDED )",
      "Bash(--wait-interval-seconds 30 )",
      "Bash(--max-wait-seconds 900)",
      "Bash(oci container-instances container-instance get:*)",
      "Bash(oci network vnic get:*)",
      "Bash(oci lb backend create:*)",
      "Bash(--load-balancer-id ocid1.loadbalancer.oc1.phx.aaaaaaaa3qyzr6nm64y7ibiwqugjnifjf5nw376lvin6edxugb52wnxqszoa )",
      "Bash(--backend-set-name \"kms-mcp-backend\" )",
      "Bash(--ip-address 10.0.0.141 )",
      "Bash(--port 3001 )",
      "Bash(--weight 1 )",
      "Bash(--region us-phoenix-1 )",
      "Bash(--wait-for-state SUCCEEDED )",
      "Bash(--wait-interval-seconds 10 )",
      "Bash(oci logging log list:*)",
      "Bash(oci container-instances container get:*)",
      "Bash(oci lb backend-health get:*)",
      "Bash(--load-balancer-id ocid1.loadbalancer.oc1.phx.aaaaaaaa3qyzr6nm64y7ibiwqugjnifjf5nw376lvin6edxugb52wnxqszoa )",
      "Bash(--backend-set-name \"kms-mcp-backend\" )",
      "Bash(--backend-name \"10.0.0.141:3001\" )",
      "Bash(--region us-phoenix-1)",
      "Bash(oci container-instances container retrieve-logs:*)",
      "Bash(oci network subnet get:*)",
      "Bash(--load-balancer-id ocid1.loadbalancer.oc1.phx.aaaaaaaa3qyzr6nm64y7ibiwqugjnifjf5nw376lvin6edxugb52wnxqszoa )",
      "Bash(--backend-set-name \"kms-mcp-backend\" )",
      "Bash(--backend-name \"10.0.0.141:3001\" )",
      "Bash(oci network security-list get:*)",
      "Bash(oci network security-list update:*)",
      "Bash(--security-list-id ocid1.securitylist.oc1.phx.aaaaaaaapfw2euffqkvwwyitcj7lwuki6pctgusnwgjdqrjuhdiwvbms5j7q )",
      "Bash(--ingress-security-rules '[\n        {\n            \"\"source\"\": \"\"0.0.0.0/0\"\",\n            \"\"source-type\"\": \"\"CIDR_BLOCK\"\",\n            \"\"protocol\"\": \"\"6\"\",\n            \"\"tcp-options\"\": {\n                \"\"destination-port-range\"\": {\n                    \"\"min\"\": 22,\n                    \"\"max\"\": 22\n                }\n            }\n        },\n        {\n            \"\"source\"\": \"\"0.0.0.0/0\"\",\n            \"\"source-type\"\": \"\"CIDR_BLOCK\"\",\n            \"\"protocol\"\": \"\"6\"\",\n            \"\"tcp-options\"\": {\n                \"\"destination-port-range\"\": {\n                    \"\"min\"\": 3001,\n                    \"\"max\"\": 3001\n                }\n            }\n        },\n        {\n            \"\"source\"\": \"\"0.0.0.0/0\"\",\n            \"\"source-type\"\": \"\"CIDR_BLOCK\"\",\n            \"\"protocol\"\": \"\"1\"\",\n            \"\"icmp-options\"\": {\n                \"\"type\"\": 3,\n                \"\"code\"\": 4\n            }\n        },\n        {\n            \"\"source\"\": \"\"10.0.0.0/24\"\",\n            \"\"source-type\"\": \"\"CIDR_BLOCK\"\",\n            \"\"protocol\"\": \"\"1\"\",\n            \"\"icmp-options\"\": {\n                \"\"type\"\": 3\n            }\n        }\n    ]' )",
      "Bash(--force)",
      "Bash(--load-balancer-id ocid1.loadbalancer.oc1.phx.aaaaaaaa3qyzr6nm64y7ibiwqugjnifjf5nw376lvin6edxugb52wnxqszoa )",
      "Bash(--backend-set-name \"kms-mcp-backend\" )",
      "Bash(--backend-name \"10.0.0.141:3001\" )",
      "Bash(oci lb backend list:*)",
      "Bash(oci lb backend delete:*)",
      "Bash(oci lb backend-set update:*)",
      "Bash(oci lb backend-set delete:*)",
      "Bash(oci lb listener update:*)",
      "Bash(openssl req:*)",
      "Bash(oci lb certificate create:*)",
      "Bash(oci lb load-balancer get:*)",
      "Bash(sudo certbot certonly:*)",
      "Bash(certbot certonly:*)",
      "Bash(dig:*)",
      "Bash(nslookup:*)",
      "Bash(oci lb certificate list:*)",
      "Bash(export:*)",
      "Bash(acme.sh:*)",
      "Bash(brew install:*)",
      "Bash(doppler:*)",
      "WebFetch(domain:support.neo4j.com)",
      "WebFetch(domain:neo4j-aura.canny.io)",
      "mcp__neo4j-knowledge__search-knowledge",
      "mcp__neo4j-knowledge__list-knowledge",
      "mcp__neo4j-knowledge__batch-store-knowledge",
      "mcp__neo4j-knowledge__store-knowledge",
      "Bash(cat:*)",
      "Bash(docker push:*)",
      "Bash(true)",
      "Bash(docker pull:*)",
      "Bash(oci iam availability-domain list:*)",
      "Bash(oci work-requests work-request list:*)"
    ],
    "deny": []
  }
}